# vim:set et ts=2 sw=2 sts=2 ft=sh:

#alias aws='docker run --rm -it -v ~/.aws:/root/.aws -v $(pwd):/aws amazon/aws-cli'

amazon-linux() {
  cond=$1
  id_only=$2
  line=$(aws ec2 describe-images \
    --output json \
    --owner amazon \
    --no-cli-pager \
    --filter "Name=name,Values=amzn-ami-*${cond}*" \
    | jq  -c ".Images[] | [.ImageId, .VirtualizationType, .RootDeviceType, .Name, .Description]" \
    | sed -e s/,/$'\t'/g \
    | tr -d '\[\]"' \
    | peco)
  if [ ! -z "${id_only}" ]; then
    echo $line | cut -d' ' -f1
  else
    echo $line
  fi
}

cf-active-stacks() {
 aws cloudformation list-stacks --stack-status-filter \
   CREATE_FAILED \
   CREATE_COMPLETE \
   ROLLBACK_IN_PROGRESS \
   ROLLBACK_FAILED \
   ROLLBACK_COMPLETE \
   DELETE_IN_PROGRESS \
   DELETE_FAILED \
   UPDATE_IN_PROGRESS \
   UPDATE_COMPLETE_CLEANUP_IN_PROGRESS \
   UPDATE_COMPLETE \
   UPDATE_ROLLBACK_IN_PROGRESS \
   UPDATE_ROLLBACK_FAILED \
   UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS \
   UPDATE_ROLLBACK_COMPLETE \
   $@
}

# [USAGE]
# ec2ssh --region REGION_NAME --profile PROFILE_NAME
ec2ssh() {
  user=${1:-'ec2-user'}
  #shift
  selected=$(aws ec2 describe-instances \
    --no-cli-pager \
    --filter "Name=instance-state-name,Values=running" \
    --query "Reservations[].Instances[].[PublicIpAddress,Tags[?Key=='Name'].Value | [0], join(',',Tags[?Key!='Name'].Value)]" \
    --output text \
    ${@} \
    | peco)
  ssh -l "$user" $(echo -n $selected | awk '{print $1}')
}

ec2list() {
  aws ec2 describe-instances \
    --no-cli-pager \
    --filter "Name=instance-state-name,Values=running" \
    --query "Reservations[].Instances[].[PublicIpAddress,Tags[?Key=='Name'].Value | [0], join(',',Tags[?Key!='Name'].Value)]" \
    --output text \
    ${@}
}

default-vpc() {
  aws ec2 describe-vpcs --filter Name=is-default,Values=true --query "Vpcs[].{VpcId:VpcId,CidrBlock:CidrBlock}" --output text
}

vpc-list() {
  aws ec2 describe-vpcs --query "Vpcs[].[Tags[?Key=='Name'].Value | [0],VpcId,CidrBlock]" --output text ${@}
}

subnet-list() {
  aws ec2 describe-subnets --query "Subnets[].[Tag[?Key==Name].Value,VpcId,SubnetId,CidrBlock]" --output text ${@}
}
default-security-group() {
  #awless list securitygroups | grep vpc-d997fcbc | grep "default VPC security group"
  aws ec2 describe-security-groups --filter "Name=description,Values='default VPC security group'" --query SecurityGroups[].[VpcId,GroupId,GroupName,Description] --output text
}

allow-me-ssh() {
  local vpcid=$1
  local gip=$(curl -s http://checkip.amazonaws.com/ | tr -d "\r\n")
  if [ "$vpcid" = "" ]; then
    local vpcid=$(aws ec2 describe-vpcs --filter "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text)
  fi
  local sgid=$(aws ec2 describe-security-groups --filter "Name=vpc-id,Values=$vpcid,Name=group-name,Values=temp-ssh" --query "SecurityGroups[].GroupId" --output text)
  if [ "$sgid" = "" ]; then
    local sgid=$(aws ec2 create-security-group --vpc-id $vpcid --group-name temp-ssh --description "Temporary ssh security group" --query "GroupId" --output text)
  fi
  for cidr in $(aws ec2 describe-security-groups --filter "Name=group-id,Values=$sgid" --query "SecurityGroups[].IpPermissions[].IpRanges[].CidrIp" --output text); do
    aws ec2 revoke-security-group-ingress --group-id $sgid --protocol tcp --port 22 --cidr $cidr
  done
  aws ec2 authorize-security-group-ingress --group-id $sgid --protocol tcp --port 22 --cidr "${gip}/32"
  echo "$sgid : ${gip}/32"
}

allow-me-rdp() {
  local vpcid=$1
  local gip=$(curl -s http://checkip.amazonaws.com/ | tr -d "\r\n")
  if [ "$vpcid" = "" ]; then
    local vpcid=$(aws ec2 describe-vpcs --filter "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text)
  fi
  local sgid=$(aws ec2 describe-security-groups --filter "Name=vpc-id,Values=$vpcid,Name=group-name,Values=temp-rdp" --query "SecurityGroups[].GroupId" --output text)
  if [ "$sgid" = "" ]; then
    local sgid=$(aws ec2 create-security-group --vpc-id $vpcid --group-name temp-rdp --description "Temporary rdp security group" --query "GroupId" --output text)
  fi
  for cidr in $(aws ec2 describe-security-groups --filter "Name=group-id,Values=$sgid" --query "SecurityGroups[].IpPermissions[].IpRanges[].CidrIp" --output text); do
    aws ec2 revoke-security-group-ingress --group-id $sgid --protocol tcp --port 3389 --cidr $cidr
  done
  aws ec2 authorize-security-group-ingress --group-id $sgid --protocol tcp --port 3389 --cidr "${gip}/32"
  echo "$sgid : ${gip}/32"
}

allow-port() {
  local port=$1
  if [ "$port" = "" ]; then
    echo port is required
    exit 1
  fi
  local vpcid=$2
  local gip=$(curl -s http://checkip.amazonaws.com/ | tr -d "\r\n")
  if [ "$vpcid" = "" ]; then
    local vpcid=$(aws ec2 describe-vpcs --filter "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text)
  fi
  local sgid=$(aws ec2 describe-security-groups --filter "Name=vpc-id,Values=$vpcid,Name=group-name,Values=temp-ssh" --query "SecurityGroups[].GroupId" --output text)
  if [ "$sgid" = "" ]; then
    local sgid=$(aws ec2 create-security-group --vpc-id $vpcid --group-name temp-ssh --description "Temporary ssh security group" --query "GroupId" --output text)
  fi
  for cidr in $(aws ec2 describe-security-groups --filter "Name=group-id,Values=$sgid" --query "SecurityGroups[].IpPermissions[].IpRanges[].CidrIp" --output text); do
    aws ec2 revoke-security-group-ingress --group-id $sgid --protocol tcp --port $port --cidr $cidr
  done
  aws ec2 authorize-security-group-ingress --group-id $sgid --protocol tcp --port $port --cidr "${gip}/32"
  echo "$sgid : ${gip}/32 port: $port"
}

cfn-new() {
  cat <<EOS
AWSTemplateFormatVersion: 2010-09-09
Description: ''
Parameters: {}
Mappings: {}
Resources: {}
Outputs: {}
EOS
}

aws-profile() {
  if [ "$AWS_DEFAULT_PROFILE" = "" ]; then
    echo "default"
  else
    echo $AWS_DEFAULT_PROFILE
  fi
  aws sts get-caller-identity
}

change-aws-profile() {
  if [ "$1" = "" ]; then
    local profile=$(cat ~/.aws/config | grep "\[profile" | sed -e "s/\[profile //" | sed -e "s/]$//" | peco)
    export AWS_DEFAULT_PROFILE=$profile
  else
    export AWS_DEFAULT_PROFILE=$1
  fi
}

regions() {
  #aws ec2 describe-regions --region ap-northeast-1 --query "Regions[].RegionName" --output text | sed -e s/$'\t'/$'\\\n'/g
  aws ec2 describe-regions --region ap-northeast-1 --query "Regions[].RegionName" --output text | sed -e s/\s+/\\n/g
}

region() {
  if [ "$AWS_DEFAULT_REGION" = "" -a -f ~/.aws/config ]; then
    cat ~/.aws/config | grep "\[default\]" -A5 | grep region | sed -e 's/.* = \(.*\)/\1/'
  else
    echo $AWS_DEFAULT_REGION
  fi
}

change-region() {
  if [ "$1" = "" ]; then
    local reg=$(regions | peco)
    export AWS_DEFAULT_REGION=$reg
  else
    export AWS_DEFAULT_REGION=$1
  fi
}
